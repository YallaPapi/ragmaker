name: Tests and Quality Checks

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      continue-on-error: true # Until ESLint is configured
      
    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY_TEST }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        UPSTASH_VECTOR_REST_URL: ${{ secrets.UPSTASH_VECTOR_REST_URL_TEST }}
        UPSTASH_VECTOR_REST_TOKEN: ${{ secrets.UPSTASH_VECTOR_REST_TOKEN_TEST }}
        
    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY_TEST }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        UPSTASH_VECTOR_REST_URL: ${{ secrets.UPSTASH_VECTOR_REST_URL_TEST }}
        UPSTASH_VECTOR_REST_TOKEN: ${{ secrets.UPSTASH_VECTOR_REST_TOKEN_TEST }}
        
    - name: Generate test coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
        YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY_TEST }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        UPSTASH_VECTOR_REST_URL: ${{ secrets.UPSTASH_VECTOR_REST_URL_TEST }}
        UPSTASH_VECTOR_REST_TOKEN: ${{ secrets.UPSTASH_VECTOR_REST_TOKEN_TEST }}
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Jest Tests
        path: coverage/junit.xml
        reporter: jest-junit
        
    - name: Archive coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-${{ matrix.node-version }}
        path: coverage/
        
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Check for vulnerable dependencies
      run: npx audit-ci --moderate
      continue-on-error: true
      
  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      run: |
        echo "Performance tests would run here"
        echo "Testing API response times"
        echo "Testing memory usage during indexing"
        echo "Testing concurrent query processing"
      
  deployment-check:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify deployment readiness
      run: |
        echo "âœ… All tests passed"
        echo "âœ… Security checks completed"
        echo "âœ… Coverage thresholds met"
        echo "ðŸš€ Ready for deployment"
        
    - name: Notify deployment status
      if: success()
      run: |
        echo "Deployment checks successful for commit ${{ github.sha }}"
        echo "Branch: ${{ github.ref }}"
        echo "Author: ${{ github.actor }}"